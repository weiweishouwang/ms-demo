group 'com.zhw.ms'
version '1.0.0-SNAPSHOT'


ext {
    javaxMailVersion = '1.4.7'
    junitVersion = '4.11'
    //springBootVersion = '1.5.10.RELEASE'
    //springVersion = '4.2.4.RELEASE'
    commonsIOVersion = '2.4'
    commonsCollectionVersion = '3.2.2'
    commonsFileUploadVersion = '1.3.3'
    commonsCodecVersion = '1.10'
    commonsLangVersion = '3.4'
    activemqVersion = '5.12.1'
    jmsVersion = '1.1'
    guavaVersion = '19.0'
    farmerVersion = '1.3.0'
    farmerSigVersion = '1.3.0'
    h2Version = '1.4.190'
    mysqlConnectorVersion = '5.1.45'
    hikariCPVersion = '2.4.1'
    transactionApiVersion = '1.2'
    mybatisVersion = '3.3.0'
    mybatisSpringVersion = '1.3.2'
    curatorVersion = '2.9.1'
    jacksonVersion = '2.8.11'
    validationApiVersion = '1.1.0.Final'
    httpclientVersion = '3.1'
    syncclientVersion = '4.1.2'
    jedisVersion = '2.8.1'
    gsonVersion = '2.6.2'
    validateVersion = '5.3.0.Alpha1'
    dom4jVersion = '1.6.1'
    jsonVersion = '20160212'
    apachePOVersion = '3.14'
    log4jBridgeVersion = '2.3'
    uuidVersion = '3.2'
    jaxenVersion = '1.1.6'
    bCommonVersion = '3.0.1.3'
    gorillaClientVersion = '1.3.4'
    lombokVersion = '1.16.12'
    kafkaVersion = '0.10.2.0'
    irisVersion = '0.0.6'
    fastjsonVersion = '1.2.44'
    rockBaseVersion = '0.0.5'

    zebraVersion = '3.0.3'
    catClientVersion = '2.2.4'
    catDubboFilterVersion = '1.0.7'
    dubboVersion = '2.8.4-p1.0.5-rc2'
    liontClientVersion = '2.2.5'

    beeProducerVersion = '1.2.0'
    beeConsumerVersion = '1.2.0'

    paymentContractVersion = '1.0.2'
    whaleContractVersion = '1.0.2'

    champagneVersion = '1.2.0'

    springDataMongodb = '2.0.6.RELEASE'

    nexusUrl = 'http://47.96.5.19:8081'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}


buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
    }
}



subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Edgware.SR3"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    configurations {
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
        all*.exclude group: "org.slf4j", module: "slf4j-jdk14"
        all*.exclude group: "log4j", module: "log4j"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "$nexusUrl/repository/maven-public" }
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-aop:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
        //compile "org.springframework:spring-aspects:$springVersion"
        
        
        compile "com.google.guava:guava:$guavaVersion"
        compile "commons-collections:commons-collections:$commonsCollectionVersion"
        compile "commons-fileupload:commons-fileupload:$commonsFileUploadVersion"
        compile "commons-codec:commons-codec:$commonsCodecVersion"
        compile "org.apache.commons:commons-lang3:$commonsLangVersion"
        //compile "org.apache.logging.log4j:log4j-1.2-api:$log4jBridgeVersion"
        compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
        compile "javax.mail:mail:$javaxMailVersion"
        compile "commons-httpclient:commons-httpclient:$httpclientVersion"
        //compile "redis.clients:jedis:$jedisVersion"
        compile "com.google.code.gson:gson:$gsonVersion"
        compile "joda-time:joda-time:2.9.6"
        compile "com.google.zxing:core:3.3.0"
        compile "dom4j:dom4j:1.6.1"
        compile "org.apache.httpcomponents:httpclient:4.5.3"
        compile "org.projectlombok:lombok:$lombokVersion"
        compile "org.apache.httpcomponents:httpasyncclient:$syncclientVersion"
        compile "com.h2database:h2:$h2Version"

        compile "org.slf4j:slf4j-api:1.7.13"
        compile "org.slf4j:jcl-over-slf4j:1.7.13"

        compile "org.apache.logging.log4j:log4j-api:2.4.1"
        compile "org.apache.logging.log4j:log4j-core:2.4.1"
        compile "org.apache.logging.log4j:log4j-slf4j-impl:2.4.1"

        compile "org.apache.logging.log4j:log4j-web:2.4.1"
        compile "com.lmax:disruptor:3.2.0"


        testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
        testCompile "org.mockito:mockito-core:2.0.57-beta"
        testCompile group: 'org.jmockit', name: 'jmockit', version: '1.8'
    }
}


project(":commons") {
    dependencies {
        compile "mysql:mysql-connector-java:$mysqlConnectorVersion"
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-data-redis:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-data-mongodb:$springBootVersion"
        compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:$mybatisSpringVersion"
    }

    apply plugin: 'maven-publish'

    group 'com.zhw.ms'
    version '1.0.0-SNAPSHOT'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId 'commons'
                from components.java
                artifact(sourcesJar) {
                    classifier = 'sources'
                }
                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if (dep.version.text() == "unspecified") {
                            dep.getAt('groupId').get(0).setValue(project.group)
                            dep.getAt('version').get(0).setValue(project.version)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "$nexusUrl/repository/maven-snapshots/"
                } else {
                    url "$nexusUrl/repository/maven-releases/"
                }
                credentials {
                    username = 'zhw'
                    password = 'zhw123'
                    //admin846413
                }
            }
        }
    }
}


project(":ms-commons") {

}

project(":demo-service-contract") {
    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        compile ("com.zhw.ms:commons:1.0.0-SNAPSHOT") { changing = true }
    }

    apply plugin: 'maven-publish'

    group 'com.zhw.ms'
    version '1.0.0-SNAPSHOT'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId 'demo-service-contract'
                from components.java
                artifact(sourcesJar) {
                    classifier = 'sources'
                }
                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if (dep.version.text() == "unspecified") {
                            dep.getAt('groupId').get(0).setValue(project.group)
                            dep.getAt('version').get(0).setValue(project.version)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "$nexusUrl/repository/maven-snapshots/"
                } else {
                    url "$nexusUrl/repository/maven-releases/"
                }
                credentials {
                    username = 'zhw'
                    password = 'zhw123'
                    //admin846413
                }
            }
        }
    }
}

project(":demo-service-client") {

}

project(":demo-service-server") {
    dependencies {
        compile ("com.zhw.ms:commons:1.0.0-SNAPSHOT") { changing = true }
        compile ("com.zhw.ms:demo-service-contract:1.0.0-SNAPSHOT") { changing = true }
        compile 'org.springframework.cloud:spring-cloud-starter-eureka'
        compile 'org.apache.kafka:kafka-clients:1.1.0'
    }

    apply plugin: 'spring-boot'
}